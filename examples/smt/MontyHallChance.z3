(define-sort door () Int)
(declare-const Guest_d door)
(declare-const Guest_d_done Bool)
(declare-const Host_goat door)
(declare-const Host_goat_done Bool)
(assert (and (not (= Host_goat Guest_d)) (not (= Host_goat Host_car))))
(declare-const Guest_switch Bool)
(declare-const Guest_switch_done Bool)
(declare-const Host_car door)
(declare-const Host_car_done Bool)
(declare-const Guest_outcome Int)
(assert (= Guest_outcome (ite (and (and Host_car_done Host_goat_done) Guest_switch_done) (ite (iff (not (= Guest_d Host_car)) Guest_switch) 20 (- 20)) (ite (or (not Host_car_done) (not Host_goat_done)) 20 (- 100)))))
(declare-const Host_outcome Int)
(assert (= Host_outcome (ite (and (and Host_car_done Host_goat_done) Guest_switch_done) 0 (ite (or (not Host_car_done) (not Host_goat_done)) (- 100) 0))))
(check-sat)
(get-model)