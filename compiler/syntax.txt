Contract:   contract SID VarsDecl Stmt

VarsDecl:   VarDecl | VarDecl VarsDecl              // Declare names + type of variables in program

VarDecl:    ListVarId Type Qualifiers               // Declare variable with name VarId of type Type with certain restrictions listed as Qualifiers

ListVarId:  VarId | VarId ListVarId 

Type:       PrimType | 

PrimType:   int | string | bool | 
            coin |                                  // The "units" of "money" used in contracts as a specific type
            parid |                                 // Primitive types. parid is the type of users/contracts identifiers (e.g., the type "address" in solidity)  
            hiddenVal                               // A commitment to a value    

Qualifiers: \epsilon | Qualifier Qualifiers 

Qualifier:  hidden                                  // hidden: a variable that is assigned value by first sending a committed value, e.g., by hash, then the value.


Stmt:       BasicCmd
            Stmt ; Stmt |    
            if (BoolExp) then Stmt else Stmt |      // conditional [?~ choice at S?]
            while (BoolExp) do Stmt' od             // while loop. Stmt' must contain a CommCmd -- [! we maybe not do it in first cut !]

BasicCmd:   PrimCmd |
            VisibleCmd | 
            ErrorCmd | 
            CommCmd

PrimCmd:    skip | 
            VarId = Exp |                           // Assign Exp to VarId

            IVarId = (int) CVarId |                 // Cast the value of a coin variable CVarId into an integer and store it in variable IVarId 
            CVarId <- CListVarId                    // Move all the coins from the variables in CListVarId into CVarId    
            CListVarId : CVarId1 <- CVarId          // Move all the money from CVarId to te variables in CListVarId and CVarId1. 
                                                    //   Every x in CListVarId gets CVarId div |CListVarId|
                                                    //   CVarId1               gets CVarId mod |CListVarId|

ErrorCmd:   require BoolExp                         // Checks if BoolExp holds, otherwise abort and rolls back (not clear where to go back to)



CommCmd:   PVarId = join String   |               // Waiting for a participant to join the contract. The participants asks to join as String
                                                    //   The identifier of the participant is assigned to PVarId, which is expected to be of type parid
                                                    //   The role of the participant is Role
           ListVarId = wait PVarId |               // Waiting for participant PVarID to send a (sequence of) values whose type determined by ListVarId.
           PVarId = join String and CommCmd       // Parallel join


visibleCmd: pay CVarId to PVarId  |                 // transfer the money stored in CVarId to PVarId

            print ParticipantList String |          // Print a string to blockchain + the ids of the participants in the contract    


Exp:        IntExp | BoolExp | StringExp  
            
BoolExp:    HVarId hides VarId



ParticipantList:    Participant | Participant ParticipantList

Participant:        Exp




// Example program

with await hidden A[int] as x  

x = wait for A to send a commitment to a value. The commitment is stored in x
do S
y = wait reveal x 